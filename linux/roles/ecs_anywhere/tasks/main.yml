---
- name: Ensure required packages are installed
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  loop:
    - ca-certificates
    - curl
    - gnupg
- name: Ensure old Docker packages are not installed
  ansible.builtin.apt:
    name: "{{ item }}"
    state: absent
  loop:
    - docker
    - docker-engine
    - docker.io
    - containerd
    - runc
- name: Check if AWS GPG key is present
  register: ecs_anywhere_aws_gpg_key_check
  ansible.builtin.command: gpg --list-keys {{ ecs_anywhere_aws_gpg_key }} 2> /dev/null
  failed_when: ecs_anywhere_aws_gpg_key_check.rc > 2
  changed_when: ecs_anywhere_aws_gpg_key_check.rc != 0
- name: Fetch AWS GPG key # noqa: no-handler
  register: ecs_anywhere_fetch_aws_gpg_key
  ansible.builtin.command: >-
    gpg --keyserver hkps://keyserver.ubuntu.com
    --recv {{ ecs_anywhere_aws_gpg_key }}
  when: ecs_anywhere_aws_gpg_key_check.changed
  changed_when: ecs_anywhere_fetch_aws_gpg_key.rc == 0
- name: /etc/apt/keyrings directory
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    owner: root
    group: root
    mode: "0755"
- name: GPG key for Docker
  ansible.builtin.copy:
    src: files/docker.gpg
    dest: /etc/apt/keyrings/docker.gpg
    owner: root
    group: root
    mode: "0644"
- name: Generate docker.list output
  register: ecs_anywhere_docker_list
  ansible.builtin.shell:
    cmd: >-
      echo deb [arch=$(dpkg --print-architecture)
      signed-by=/etc/apt/keyrings/docker.gpg]
      https://download.docker.com/linux/ubuntu
      $(. /etc/os-release && echo "$VERSION_CODENAME")
      stable
  changed_when: false
- name: Add Docker repo to apt
  ansible.builtin.copy:
    content: "{{ ecs_anywhere_docker_list.stdout }}"
    dest: /etc/apt/sources.list.d/docker.list
    owner: root
    group: root
    mode: '0644'
- name: Ensure new Docker packages are installed
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
    update_cache: true
  loop:
    - docker-ce
    - docker-ce-cli
    - containerd.io
    - docker-buildx-plugin
    - docker-compose-plugin
- name: Apparmor profile for Docker
  ansible.builtin.copy:
    src: files/docker-default
    dest: /etc/apparmor.d/docker-default
    owner: root
    group: root
    mode: "0644"
  notify:
    - Apparmor for Docker
    - Docker
    - ECS agent
- name: Fetch install script signature
  ansible.builtin.get_url:
    dest: /root/ecs-anywhere-install.sh.asc
    owner: root
    group: root
    mode: '0600'
    url: "{{ ecs_anywhere_install_prefix }}/ecs-anywhere-install-latest.sh.asc"
  register: ecs_anywhere_sh_asc
- name: Fetch install script
  ansible.builtin.get_url:
    dest: /root/ecs-anywhere-install.sh
    owner: root
    group: root
    mode: '0600'
    url: "{{ ecs_anywhere_install_prefix }}/ecs-anywhere-install-latest.sh"
  register: ecs_anywhere_sh
- name: Verify install script
  ansible.builtin.command:
    gpg --verify /root/ecs-anywhere-install.sh.asc /root/ecs-anywhere-install.sh
  when: ecs_anywhere_sh_asc.changed or ecs_anywhere_sh.changed
  changed_when: false
- name: Install ECS Anywhere
  when: |
    ecs_anywhere_activation_id is defined and
    ecs_anywhere_activation_code is defined
  changed_when: false
  ansible.builtin.command:
    cmd: >-
      bash /root/ecs-anywhere-install.sh
      --region {{ ecs_anywhere_region }}
      --cluster {{ ecs_anywhere_cluster }}
      --activation-id {{ ecs_anywhere_activation_id | trim | quote }}
      --activation-code {{ ecs_anywhere_activation_code | trim | quote }}
    creates: /etc/init/amazon-ssm-agent.conf
- name: Configure ECS Anywhere
  ansible.builtin.template:
    owner: root
    group: root
    src: ecs.config.j2
    dest: /etc/ecs/ecs.config
    mode: '0644'
  notify: ECS agent
- name: SSM is running
  ansible.builtin.service:
    name: amazon-ssm-agent
    state: started
- name: Pip is installed
  ansible.builtin.apt:
    name: python3-pip
    state: present
- name: Boto3 package is installed
  ansible.builtin.pip:
    name: boto3
- name: Fetch CLI install script
  ansible.builtin.get_url:
    dest: /root/awscliv2.zip
    owner: root
    group: root
    mode: '0600'
    url: "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
  register: ecs_anywhere_cli_zip
- name: Unzip is installed
  ansible.builtin.apt:
    name: unzip
    state: present
- name: Expand AWSCLI
  when: ecs_anywhere_cli_zip.changed # noqa: no-handler
  ansible.builtin.unarchive:
    src: /root/awscliv2.zip
    dest: /root
- name: Install AWSCLI
  when: ecs_anywhere_cli_zip.changed # noqa: no-handler
  changed_when: true
  ansible.builtin.command:
    /root/aws/install --bin-dir /usr/local/bin --update
- name: Create /etc/ansible/facts.d
  ansible.builtin.file:
    state: directory
    path: /etc/ansible/facts.d
    owner: root
    group: root
    mode: '0755'
- name: Create ECS agent facts
  register: ecs_anywhere_ecs_fact
  ansible.builtin.copy:
    content: |
      #!/bin/sh
      curl -s http://localhost:51678/v1/metadata
    dest: /etc/ansible/facts.d/ecs-agent.fact
    owner: root
    group: root
    mode: '0755'
- name: Create SSM facts
  register: ecs_anywhere_ssm_fact
  ansible.builtin.copy:
    content: |
      #!/bin/sh
      cat /var/lib/amazon/ssm/registration
    dest: /etc/ansible/facts.d/ssm-agent.fact
    owner: root
    group: root
    mode: '0755'
- name: Rerun Ansible setup
  ansible.builtin.setup: ~
  when: ecs_anywhere_ecs_fact.changed or ecs_anywhere_ssm_fact.changed # noqa: no-handler
- name: Write hostname as Name tag
  ansible.builtin.command: >-
    aws ssm add-tags-to-resource
    --region {{ ecs_anywhere_region }}
    --resource-type ManagedInstance
    --resource-id {{ ansible_local["ssm-agent"]["ManagedInstanceID"] }}
    --tags Key=Name,Value={{ inventory_hostname }}
  changed_when: false
- name: Write container attributes
  loop: "{{ ecs_anywhere_attributes | dict2items }}"
  when: item.value
  changed_when: false
  ansible.builtin.command:
    cmd: >-
      aws ecs put-attributes
      --cluster {{ ecs_anywhere_cluster }}
      --region {{ ecs_anywhere_region }}
      --attributes "name={{ item.key }},value={{ item.value }},targetId={{ ansible_local["ecs-agent"]["ContainerInstanceArn"] }}"
- name: Write container attributes (empty)
  loop: "{{ ecs_anywhere_attributes | dict2items }}"
  when: not item.value
  changed_when: false
  ansible.builtin.command:
    cmd: >-
      aws ecs put-attributes
      --cluster {{ ecs_anywhere_cluster }}
      --region {{ ecs_anywhere_region }}
      --attributes "name={{ item.key }},targetId={{ ansible_local["ecs-agent"]["ContainerInstanceArn"] }}"
